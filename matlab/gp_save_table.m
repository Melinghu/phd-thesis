function gp_save_table(file,comment,colheader,rowheader,varargin)
% GP_SAVE_TABLE saves tabled data as a text file in a Gnuplot compatible format
%
%   Usage: gp_save_table(file,comment,columnheader,rowheader,d1,d2,...)
%
%   Input parameters:
%       file         - filename of the data file / string
%       comment      - comment to describe the dataset / string
%       colheader    - cell or numeric array containing header of columns
%                      [1xn]
%       rowheader    - cell or numeric array containing header of rows
%                      [mx1]
%       d1,d2,...    - 2D arrays with same number of rows (either cell of
%                      strings or numeric array) [m x n]
%
%   GP_SAVE_TABLE(file,comment,colheader,rowheader,varargin)
%   saves the values d1,d2,... in text file with a format useable by Gnuplot

%*****************************************************************************
% Copyright (c) 2019      Fiete Winter                                       *
%                         Institut fuer Nachrichtentechnik                   *
%                         Universitaet Rostock                               *
%                         Richard-Wagner-Strasse 31, 18119 Rostock, Germany  *
%                                                                            *
% This file is part of the supplementary material for Fiete Winter's         *
% PhD thesis                                                                 *
%                                                                            *
% You can redistribute the material and/or modify it  under the terms of the *
% GNU  General  Public  License as published by the Free Software Foundation *
% , either version 3 of the License,  or (at your option) any later version. *
%                                                                            *
% This Material is distributed in the hope that it will be useful, but       *
% WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY *
% or FITNESS FOR A PARTICULAR PURPOSE.                                       *
% See the GNU General Public License for more details.                       *
%                                                                            *
% You should  have received a copy of the GNU General Public License along   *
% with this program. If not, see <http://www.gnu.org/licenses/>.             *
%                                                                            *
% http://github.com/fietew/phd-thesis                 fiete.winter@gmail.com *
%*****************************************************************************

%% ===== Checking of input  parameters ==================================
nargmin = 5;
narginchk(nargmin,inf);
colheader = colheader(:).';  % ensure row vector
rowheader = rowheader(:);  % ensure column vector

if any(cellfun(@(A) ~iscellstr(A) && ~isnumeric(A), varargin))
  error('%s: Data inputs must either be cells of strings or numeric!', ...
    upper(mfilename));
end

rows = cellfun( @(A) size(A,1), varargin );
if ~isempty(rowheader) && any( rows ~= size(rowheader,1) )
  error(['%s: Each data inputs must have the same number of rows as the', ...
    ' row header!'], upper(mfilename));
end
cols= cellfun( @(A) size(A,2), varargin );
if ~isempty(colheader) && sum(cols) ~= size(colheader,2)
  error(['%s: Overall number of columms has to match the columns in the', ...
    ' column header!'], upper(mfilename));
end

%% ===== Main ============================================================
% Write header to the file
fid = fopen(file,'w');
fprintf(fid,'# Data file generated by gp_save_table.m\n');
fprintf(fid,'# %s\n', comment);

if ~isempty(colheader)
  if ~isempty(rowheader)
    fprintf(fid,'\t');
  end
  print_helper(fid, colheader(:).', 1);
end
fprintf(fid,'\n');

for rdx=1:rows
  if ~isempty(rowheader)
    print_helper(fid, rowheader, rdx);
  end
  for idx=1:length(varargin)
    print_helper(fid, varargin{idx}, rdx);
  end
  fprintf(fid,'\n');
end
fclose(fid);

end

%% ===== Helper ==========================================================
function print_helper(fid, A, rowidx)

if isnumeric(A)
  fprintf(fid,'%f\t', A(rowidx,:));
else
  cellfun(@(a) fprintf(fid,'%s\t', a), A(rowidx,:));
end

end
